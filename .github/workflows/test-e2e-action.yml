name: Test e2e environment setup action

on:
  push:
    branches:
      # pull request branches created by auto updater
      - "autoupdate/**"
      - "autodeploy/**"
  pull_request:
    branches: ["**"]

jobs:
  create-test-bundle:
    runs-on: ubuntu-20.04

    outputs:
      release_name: ${{ steps.set_release_name.outputs.release_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Retrieve branch name
        uses: HSLdevcom/jore4-tools/github-actions/extract-metadata@extract-metadata-v1

      - name: Set release name as output
        id: set_release_name
        run: |
          # making sure that the release name is unique
          RELEASE_NAME="e2e-setup-test-bundle-${{ env.BRANCH_NAME }}-$(date +%s)"
          echo "RELEASE_NAME=${RELEASE_NAME}" >> "${GITHUB_ENV}"
          echo "::set-output name=release_name::${RELEASE_NAME}"

      # note: make sure to only run a single workflow from this as you cannot create multiple
      # releases with the same name at once (e.g. only run workflow on 'pull_request')
      - name: Create docker compose bundle release for testing
        uses: ./github-actions/create-docker-bundle-release
        with:
          release_name: ${{ env.RELEASE_NAME }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      # To make sure the just created release is available for download, let's wait a bit...
      - name: Aaaand wait...
        run: |
          sleep 15

  test-e2e-setup-action:
    needs: create-test-bundle
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        include:
          # no overwrites for images
          - ui-docker-image:
            hasura-docker-image:
            auth-docker-image:
            mbtiles-docker-image:
            jore3importer-docker-image:
            testdb-docker-image:
            mssqltestdb-docker-image:
            mapmatching-docker-image:
            mapmatchingdb-docker-image:
            cypress-docker-image:
            custom_docker_compose:
          # overwrite some
          - ui-docker-image: "hsldevcom/jore4-ui:latest"
            hasura-docker-image:
            auth-docker-image:
            mbtiles-docker-image:
            jore3importer-docker-image:
            testdb-docker-image:
            mssqltestdb-docker-image:
            mapmatching-docker-image:
            mapmatchingdb-docker-image:
            cypress-docker-image:
            custom_docker_compose:
          # use custom docker-compose file
          - ui-docker-image:
            hasura-docker-image:
            auth-docker-image:
            mbtiles-docker-image:
            jore3importer-docker-image:
            testdb-docker-image:
            mssqltestdb-docker-image:
            mapmatching-docker-image:
            mapmatchingdb-docker-image:
            cypress-docker-image:
            custom_docker_compose: "custom-compose.yml" # this overwrites the hasura image to be "jore4-hasura:latest"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Retrieve branch name
        uses: HSLdevcom/jore4-tools/github-actions/extract-metadata@extract-metadata-v1

      - name: Create a temporary custom docker compose file for testing
        run: |
          touch custom-compose.yml
          echo "services:" >> custom-compose.yml
          echo "  jore4-hasura:" >> custom-compose.yml
          echo "    image: 'hsldevcom/jore4-hasura:latest'" >> custom-compose.yml

      - name: start e2e env
        uses: ./github-actions/setup-e2e-environment
        with:
          bundle_version: ${{needs.create-test-bundle.outputs.release_name}}
          ui_version: ${{ matrix.ui-docker-image }}
          hasura_version: ${{ matrix.hasura-docker-image }}
          auth_version: ${{ matrix.auth-docker-image }}
          mbtiles_version: ${{ matrix.mbtiles-docker-image }}
          jore3importer_version: ${{ matrix.jore3importer-docker-image }}
          testdb_version: ${{ matrix.testdb-docker-image }}
          mssqltestdb_version: ${{ matrix.mssqltestdb-docker-image }}
          mapmatching_version: ${{ matrix.mapmatching-docker-image }}
          mapmatchingdb_version: ${{ matrix.mapmatchingdb-docker-image }}
          cypress_version: ${{ matrix.cypress-docker-image }}
          custom_docker_compose: ${{ matrix.custom_docker_compose }}

      - name: Check that correct version of UI is running
        run: |
          UI_DEPLOYED_VERSION=`docker inspect --format='{{.Config.Image}}' ui`
          if [[ "${{ matrix.ui-docker-image }}" == "" && "$UI_DEPLOYED_VERSION" == "${{ matrix.ui-docker-image }}" ]]
          then
            echo "Error! The docker image version shouldn't have been overwritten!"
            exit 1
          fi

          if [[ "${{ matrix.ui-docker-image }}" != "" && "$UI_DEPLOYED_VERSION" != "${{ matrix.ui-docker-image }}" ]]
          then
            echo "Error! The docker image version should've been overwritten!"
            exit 1
          fi

      - name: Check that correct version of HASURA is running (overwritten by custom docker compose file)
        run: |
          HASURA_DEPLOYED_VERSION=`docker inspect --format='{{.Config.Image}}' hasura`
          if [[ "${{ matrix.custom_docker_compose }}" == "" && "$HASURA_DEPLOYED_VERSION" == "hsldevcom/jore4-hasura:latest" ]]
          then
            echo "Error! The docker image version shouldn't have been overwritten!"
            exit 1
          fi

          if [[ "${{ matrix.custom_docker_compose }}" != "" && "$HASURA_DEPLOYED_VERSION" != "hsldevcom/jore4-hasura:latest" ]]
          then
            echo "Error! The docker image version should've been overwritten!"
            exit 1
          fi
